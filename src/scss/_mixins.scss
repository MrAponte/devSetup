/********************************

[Description]
  This file contains functions (aka mixins) to assist you when authoring CSS.


[Table of Contents]


*********************************/

/*

[Name]
  break

[Description]
  Easy breakpoint creation mixin

[Usage]
  @include break(min-max, 420px, 800px ) { display: none; }

*/

@mixin break($min-or-max, $bp1, $bp2: false) {
  $min-max: "only screen and (min-width: " + $bp1 + ")" + " and " + "(max-width: " + $bp2 + ")";
  $min: "only screen and (min-width: " + $bp1 + ")";
  $max: "only screen and (max-width: " + $bp1 + ")";
  @if $min-or-max == min-max {
    @media #{$min-max} {
      @content;
    }
  } @else if $min-or-max == min {
    @media #{$min} {
      @content;
    }
  } @else if $min-or-max == max {
    @media #{$max} {
      @content;
    }
  }
}

@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/*

[Name]
  if

[Description]
  Used to conditionally output styles when a specified number of sibling elements exist..

 [Usage]
     .someClass {
         @include if(2) {
             // Styles added here will only apply if there are two .someClass elements
         }
     }

     .someClass {
         @include if(5) {
             // Styles added here will only apply if there are five .someClass elements
         }
     }

*/

@mixin if($args...) {
  @if nth($args, 1) == any {
    &:nth-of-type(1n):nth-of-type(1n) {
      @content;
    }
  } @else {
    @each $arg in $args {
      @if type-of($arg) == number {
        @for $i from 1 through $arg {
          &:nth-of-type(#{$i}):nth-last-of-type(#{$arg - $i + 1}) {
            @content;
          }
        }
      }
    }
  }
}

/*

[Name]
  gradient

[Description]
  Used to output the necessary CSS styles to display a gradient. By default, it generates a vertical gradient unless "horizontal" is passed as the last argument. Supports all browsers.

 [Usage]
    @include gradient(#ff0000, #0000ff);
    @include gradient(#ff0000, #0000ff, horizontal);
    @include gradient(#ff0000, #0000ff, #00ff00);
    @include gradient(#ff0000, #0000ff, #00ff00, horizontal);

*/

@mixin gradient($start, $mid, $end: none, $direction: vertical) {
  background: $start;
  @if $direction == vertical {
    @if $end == vertical {
      background: linear-gradient(to bottom, #{$start} 0%, #{$mid} 100%);
      filter: progid:DXImageTransform.Microsoft.gradient(
          startColorstr='#{$start}',
          endColorstr='#{$mid}',
          GradientType=0
        );
    } @else if $end == horizontal {
      background: linear-gradient(to right, #{$start} 0%, #{$mid} 100%);
      filter: progid:DXImageTransform.Microsoft.gradient(
          startColorstr='#{$start}',
          endColorstr='#{$mid}',
          GradientType=1
        );
    } @else if $end == none {
      background: linear-gradient(to bottom, #{$start} 0%, #{$mid} 100%);
      filter: progid:DXImageTransform.Microsoft.gradient(
          startColorstr='#{$start}',
          endColorstr='#{$mid}',
          GradientType=0
        );
    } @else {
      background: linear-gradient(to bottom, #{$start} 0%, #{$mid} 50%, #{$end} 100%);
      filter: progid:DXImageTransform.Microsoft.gradient(
          startColorstr='#{$start}',
          endColorstr='#{$end}',
          GradientType=0
        );
    }
  } @else {
    background: linear-gradient(to right, #{$start} 0%, #{$mid} 50%, #{$end} 100%);
    filter: progid:DXImageTransform.Microsoft.gradient(
        startColorstr='#{$start}',
        endColorstr='#{$end}',
        GradientType=1
      );
  }
}

/*
    [Name]
        Keyframes Prefixing

    [Description]
        Easy vendor prefixing for Keyframes

    [Usage]
        @include keyframes('nameOfAnimation') {
            keyframe_1 {
                property: value;
            }
            keyframe_2 {
                property: value;
            }
        }

*/

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

/*

 [Name]
   Vendor Prefixing

 [Description]
    Easy creation of vendor prefixes

 [Usage]
    @include vendor-prefix('property', 'value');

*/

@mixin vendor-prefix($name, $value) {
  @each $vendor in ('-webkit-', '-moz-', '-ms-', '-o-', '') {
    #{$vendor}#{$name}: #{$value};
  }
}
